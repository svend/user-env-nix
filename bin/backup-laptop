#!/usr/bin/env python3

import argparse
import json
import itertools
import os
import subprocess
import sys
import time
from datetime import datetime, timedelta

TARGETS = ["~"]
PLATFORM_TARGETS = {"darwin": ["/usr/local"]}
DATE_FILE = os.path.expanduser("~/.backup-laptop-dates")
# macOS has restrictions for access for paths under ~/Library. Exclude the
# whole thing. https://github.com/restic/restic/issues/2051
EXCLUDES = [
    "~/.cargo",
    "~/.rnd",
    "~/Library",
    "~/Pictures/Photos Library.photoslibrary",
    "~/go",
]


def run_command(command, dry_run=False):
    command = ["echo"] + command if dry_run else command
    return subprocess.run(command, check=True)


def notify(message, dry_run=False):
    if sys.platform == "darwin":
        run_command(
            ["terminal-notifier", "-message", message, "-group", "backup-laptop"],
            dry_run=dry_run,
        )
    elif sys.platform == "linux":
        run_command(["notify-send", message], dry_run=dry_run)


def device_from_path(path, dry_run=False):
    command = ["findmnt", "--json", "--target", path]
    if dry_run:
        run_command(command, dry_run=dry_run)
        return "dry-run-device"

    proc = subprocess.run(command, check=True, stdout=subprocess.PIPE)
    j = json.loads(proc.stdout)
    return j["filesystems"][0]["source"]


def eject_drive(path, dry_run=False):
    if sys.platform == "darwin":
        run_command(["diskutil", "eject", path], dry_run=dry_run)
    elif sys.platform == "linux":
        dev = device_from_path(path, dry_run=dry_run)
        run_command(["gpg-luks", "close", dev], dry_run=dry_run)


def targets():
    extra_targets = PLATFORM_TARGETS.get(sys.platform, [])
    return [os.path.expanduser(p) for p in TARGETS + extra_targets]


def backup(repo, dry_run):
    os.environ["RESTIC_REPOSITORY"] = repo

    excludes = [["--exclude", os.path.expanduser(e)] for e in EXCLUDES]
    excludes = list(itertools.chain.from_iterable(excludes))

    start_time = time.time()
    run_command(
        ["restic-gpg", "backup", "--one-file-system",] + excludes + targets(),
        dry_run=dry_run,
    )
    end_time = time.time()
    duration = timedelta(seconds=int(end_time - start_time))
    if not dry_run:
        with open(DATE_FILE, "a") as f:
            timestamp = datetime.utcnow().isoformat()
            f.write(f"{timestamp} backup: {repo} (duration: {duration})\n")


def forget(repo, dry_run):
    os.environ["RESTIC_REPOSITORY"] = repo
    start_time = time.time()
    run_command(
        [
            "restic-gpg",
            "forget",
            "--prune",
            "--keep-daily",
            "7",
            "--keep-weekly",
            "5",
            "--keep-monthly",
            "12",
            "--keep-yearly",
            "75",
        ],
        dry_run=dry_run,
    )
    end_time = time.time()
    duration = timedelta(seconds=int(end_time - start_time))
    if not dry_run:
        with open(DATE_FILE, "a") as f:
            timestamp = datetime.utcnow().isoformat()
            f.write(f"{timestamp} forget: {repo} (duration: {duration})\n")


def run(*, repo, do_eject=True, do_backup=True, do_prune=True, dry_run=False):
    repo = os.path.normpath(repo)
    start_time = time.time()
    if do_backup:
        backup(repo, dry_run=dry_run)
    if do_prune:
        forget(repo, dry_run=dry_run)
    end_time = time.time()
    duration = timedelta(seconds=int(end_time - start_time))
    if do_eject:
        eject_drive(os.path.dirname(repo), dry_run=dry_run)
    notify(f"Backup complete ({duration})", dry_run=dry_run)


def parse_args():
    parser = argparse.ArgumentParser(
        description="Backup laptop", argument_default=argparse.SUPPRESS
    )
    parser.add_argument("repo", help="path to restic repository")
    parser.add_argument(
        "--no-eject",
        help="do not eject the drive",
        action="store_false",
        dest="do_eject",
    )
    parser.add_argument(
        "--no-backup",
        help="do not run restic backup",
        action="store_false",
        dest="do_backup",
    )
    parser.add_argument(
        "--no-prune",
        help="do not run restic prune/foget",
        action="store_false",
        dest="do_prune",
    )
    parser.add_argument("--dry-run", help="dry run mode", action="store_true")
    return parser.parse_args()


if __name__ == "__main__":
    args = parse_args()
    sys.exit(run(**vars(args)))
