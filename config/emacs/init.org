#+TITLE: Emacs Configuration

* User information

#+begin_src emacs-lisp
(setq user-full-name "Svend Sorensen")
(setq user-mail-address "svend@svends.net")
#+end_src

* Initialize package.el

[[https://www.gnu.org/software/emacs/manual/html_node/emacs/Package-Installation.html#Package-Installation][Emacs Package Installation]]

#+begin_src emacs-lisp
(setq package-archives '()) ;; All packages are installed through nixpkgs
#+end_src

* Initialize use-package

This is [[https://github.com/jwiegley/use-package/blob/d2640fec376a8458a669e7526e63e5870d875118/README.md#use-packageel-is-no-longer-needed-at-runtime][required]] before any use-package forms.

#+begin_src emacs-lisp
(eval-when-compile
  (require 'use-package)
  ;; Compute statistics (`M-x use-package-report` to see results)
  (setq use-package-compute-statistics t))
(require 'bind-key)
#+end_src

* icomplete

#+begin_src emacs-lisp
;; Always prompt before creating new file or buffer
(setq confirm-nonexistent-file-or-buffer t)

;; Icomplete setup
(icomplete-mode 1)
(icomplete-vertical-mode 1)
(setq icomplete-hide-common-prefix nil) ; show full completion canditate
(setq icomplete-show-matches-on-no-input t)
(setq icomplete-compute-delay 0) ; show completions immediately
;; Make Enter select first completion (same as C-j)
(define-key icomplete-minibuffer-map (kbd "RET") 'icomplete-force-complete-and-exit)
(define-key icomplete-minibuffer-map (kbd "C-n") 'icomplete-forward-completions)
(define-key icomplete-minibuffer-map (kbd "C-p") 'icomplete-backward-completions)
#+end_src

* Environment variables

- Set PAGER to cat to disable =less= in async buffers.
- Use =gpg-agent= for SSH.
- Use Nix certificate bundle.

#+begin_src emacs-lisp
(setenv "EDITOR" "emacsclient")
(setenv "PAGER" "cat")
(setenv "BUILDKIT_PROGRESS" "plain") ; Plain docker build output
(setenv "PYTHONSTARTUP" (expand-file-name "~/.config/python-startup.py"))
(when (eq window-system 'ns)
  (setenv "SSH_AUTH_SOCK" (expand-file-name "~/.gnupg/S.gpg-agent.ssh")))
(let ((custom-cert-file (expand-file-name "~/.nix-profile/etc/ssl/certs/ca-bundle.crt")))
  (when (file-exists-p custom-cert-file)
    (setenv "NIX_SSL_CERT_FILE" custom-cert-file)  ; (nixpkgs) https://nixos.org/manual/nix/stable/#sec-nix-ssl-cert-file
    (setenv "REQUESTS_CA_BUNDLE" custom-cert-file) ; (python-requests) https://github.com/psf/requests/blob/4f6c0187150af09d085c03096504934eb91c7a9e/requests/sessions.py#L718
    (setenv "SSL_CERT_FILE" custom-cert-file)      ; (python-httpx) https://github.com/psf/requests/blob/4f6c0187150af09d085c03096504934eb91c7a9e/requests/sessions.py#L718
    ))
#+end_src

* Set executable path

Emacs adds emacs-packages-deps/bin to exec-path; copy this value to PATH.
https://github.com/NixOS/nixpkgs/blob/a64b9f2b106607b5d533c8238e577a79b229a679/pkgs/build-support/emacs/wrapper.nix#L160

Add =/usr/local/bin= to exec-path.

Initial PATH:

#+begin_example
macOS: /usr/bin:/bin:/usr/sbin:/sbin
NixOS: /run/wrappers/bin:/home/svend/.nix-profile/bin:/etc/profiles/per-user/svend/bin:/nix/var/nix/profiles/default/bin:/run/current-system/sw/bin
#+end_example

#+begin_src emacs-lisp
(message "initial exec-path: %s" exec-path)
(message "initial PATH: %s" (getenv "PATH"))

(let* ((deps-path (car exec-path))
       (nix-profile-path (expand-file-name "~/.nix-profile/bin"))
       (local-path "/usr/local/bin")
       (path (list deps-path nix-profile-path local-path)))

  ;; Remove deps-path, will get added to beginning of path
  (setq exec-path (remove deps-path exec-path))

  (dolist (p (reverse path))
    (unless (member p exec-path)
      (setenv "PATH" (format "%s:%s" p (getenv "PATH")))
      (add-to-list 'exec-path p))))

(message "updated exec-path: %s" exec-path)
(message "updated PATH: %s" (getenv "PATH"))
#+end_src

* Emacs UI

Make the cursor a bar instead of a filled box.

#+begin_src emacs-lisp
(setq-default cursor-type 'bar)
#+end_src

** Chrome

Note: setting inhibit-startup-screen has no effect when set in =share/emacs/site-lisp/default.el=.

- Disable welcome screen
- Disable tool bar

#+begin_src emacs-lisp
;; (setq inhibit-startup-screen t)
(when (fboundp 'tool-bar-mode) (tool-bar-mode -1))
#+end_src

** Mode line

- Display column number in mode-line (line number is displayed by default)

#+begin_src emacs-lisp
(setq column-number-indicator-zero-based nil)
(column-number-mode 1)
(setq display-time-default-load-average nil
      display-time-format "%Y-%m-%d %H:%M")
(display-time-mode 1)
#+end_src

** Scrolling

Enable smooth scrolling.

TODO: Disabled, this doesn't make scrolling much smoother, and it slows down scrolling

#+begin_src emacs-lisp :tangle no
(pixel-scroll-mode 1)
#+end_src

** Fonts

Larger font on macOS vs Linux.

#+begin_src emacs-lisp
(set-face-attribute 'default nil :height (if (eq window-system 'ns) 160 110))
#+end_src

Font to use.

#+begin_src emacs-lisp
(progn
  (set-face-attribute 'default nil :family "Iosevka Extended")
  (set-face-attribute 'fixed-pitch nil :family "Iosevka Extended")
  (set-face-attribute 'variable-pitch nil :family "Iosevka Aile"))
#+end_src

#+begin_src emacs-lisp :tangle no
(progn
  (set-face-attribute 'default nil :family "DejaVu Sans Mono")
  (set-face-attribute 'fixed-pitch nil :family "DejaVu Sans Mono")
  (set-face-attribute 'variable-pitch nil :family "DejaVu Sans"))
#+end_src

*** Line spacing

Add additional spacing between lines.

#+begin_src emacs-lisp
(setq-default line-spacing 0.15)
#+end_src

To see how different values look, press =C-x C-e= at the end of these lines:

#+begin_src emacs-lisp :tangle no
(setq line-spacing nil)
(setq line-spacing 0.05)
(setq line-spacing 0.10)
(setq line-spacing 0.15)
(setq line-spacing 0.20)
#+end_src

*** Linux

I install fonts through nixpkgs.

User fonts can also go in =$XDG_DATA_HOME/fonts/= (=~/.local/share/fonts=).

*** macOS

On macOS, I install fonts through nixpkgs, then sync them using a script.

#+begin_src sh :tangle no
#!/bin/sh
set -e

FONT_DIR="$HOME"/Library/Fonts

[ -d "$FONT_DIR" ] || exit 1

rsync -av \
  --copy-links \
  --delete \
  "$HOME"/.nix-profile/share/fonts/*/ \
  "$HOME"/Library/Fonts
#+end_src

*** Fixed pitch mode

#+begin_src emacs-lisp
(require 'face-remap)

(defun my-fixed-pitch-mode (&optional arg)
  "Fixed-pitch default-face mode.
  An interface to `buffer-face-mode' which uses the `fixed-pitch' face.
  Besides the choice of face, it is the same as `buffer-face-mode'."
  (interactive (list (or current-prefix-arg 'toggle)))
  (buffer-face-mode-invoke 'fixed-pitch arg
                           (called-interactively-p 'interactive)))
#+end_src

* Emacs themes

Disable current theme before loading new theme. This prevents artifacts from the
old theme.

[[https://stackoverflow.com/questions/22866733/emacs-disable-theme-after-loading-a-different-one-themes-conflict?noredirect%3D1#comment34887344_22866733][Emacs disable-theme after loading a different one (Stack Overflow)]]

#+begin_src emacs-lisp
(defun disable-all-themes ()
  "Disable all active themes."
  (interactive)
  (dolist (i custom-enabled-themes)
    (disable-theme i)))

(defun my-load-theme ()
  "Load a single theme then load override theme."
  (interactive)
  (disable-all-themes)
  (call-interactively 'load-theme))
#+end_src

Treat all themes as safe.

#+begin_src emacs-lisp
(setq custom-safe-themes t)
#+end_src

Custom exist in the =themes/= directory alongside the Emacs init file.

#+begin_src emacs-lisp
(when load-file-name
  (let ((config-dir (file-name-as-directory (file-name-directory (file-truename load-file-name)))))
    (add-to-list 'custom-theme-load-path (concat config-dir "themes/"))))
#+end_src

Load themes.

#+begin_src emacs-lisp
(load-theme 'svend 't)
#+end_src

* Emacs settings

** Bell

Use visual bell.

#+begin_src emacs-lisp
(setq visible-bell t)
#+end_src

Reduce bell noise for common actions (e.g. =C-g=).

#+begin_src emacs-lisp
(setq ring-bell-function
      (lambda ()
        (unless
            (memq this-command
                  '(abort-recursive-edit
                    isearch-abort
                    isearch-printing-char
                    keyboard-quit
                    nil))
          (ding))))
#+end_src

** Mouse

Copy test selected by the mouse to the kill ring. This was turned off in
Emacs 24.

#+begin_src emacs-lisp
(setq mouse-drag-copy-region t)
#+end_src

** Highlight current line

Highlight the current line, including in inactive windows.

#+begin_src emacs-lisp
(setq global-hl-line-sticky-flag t)
(global-hl-line-mode 1)
#+end_src

To disable for a mode, add this to the mode hook:

#+begin_src emacs-lisp :tangle no
(setq-local global-hl-line-mode nil)
#+end_src

** Y/N answers

Enable y/n answers.

#+begin_src emacs-lisp
(fset 'yes-or-no-p 'y-or-n-p)
#+end_src

** Disabled commands

Enable some disabled commands.

#+begin_src emacs-lisp
(mapc (lambda (command) (put command 'disabled nil))
      '(erase-buffer
        downcase-region
        upcase-region
        upcase-initials-region))
#+end_src

Disable keyboard shortcut to print buffer.

#+begin_src emacs-lisp
(global-unset-key (kbd "s-p"))
#+end_src

** Enable delete-selection-mode

This replaces the selection.

#+begin_src emacs-lisp
(delete-selection-mode 1)
#+end_src

** macOS specific configuration

#+begin_src emacs-lisp
(when (eq window-system 'ns)
  ;; Stop commant+t from popping up font selection window
  (global-unset-key (kbd "s-t")))
#+end_src

** Programming modes

Turn on flyspell and goto-address for all text buffers.

#+begin_src emacs-lisp
(add-hook 'text-mode-hook #'flyspell-mode)
(add-hook 'text-mode-hook #'goto-address-mode)
(add-hook 'text-mode-hook #'variable-pitch-mode)
#+end_src

Turn on flyspell, goto-address, line numbers, and whitespace for programming
buffers.

#+begin_src emacs-lisp
(defun my-prog-mode-hook()
  (flyspell-prog-mode)
  (goto-address-prog-mode)
  (setq show-trailing-whitespace t
        truncate-lines t))

(add-hook 'prog-mode-hook #'my-prog-mode-hook)
(add-hook 'yaml-mode-hook #'my-prog-mode-hook)
(add-hook 'yaml-mode-hook #'my-fixed-pitch-mode)
#+end_src

#+begin_src emacs-lisp
(global-eldoc-mode 1)
#+end_src

** Auto modes

=bash-fc-*= are bash command editing temporary files (=fc= built-in).

#+begin_src emacs-lisp
(add-to-list 'auto-mode-alist '(".mrconfig$" . conf-mode))
(add-to-list 'auto-mode-alist '("/etc/network/interfaces" . conf-mode))
(add-to-list 'auto-mode-alist '("Carton\\'" . lisp-mode))
(add-to-list 'auto-mode-alist '("bash-fc-" . sh-mode))
#+end_src

** Lock files

http://www.gnu.org/software/emacs/manual/html_node/elisp/File-Locks.html

Locks are created in the same directory as the file being edited. They can be
disabled as of 24.3.

http://lists.gnu.org/archive/html/emacs-devel/2011-07/msg01020.html

#+begin_src emacs-lisp
(setq create-lockfiles nil)
#+end_src

** Backup and auto-saves

Disable auto-saves (which are period copies of unsaved changes).

Disable backups (which are a copy of original file when modifications are
saved).

I use the super-save package to save all changes. Backups are handled by
version-control.

#+begin_src emacs-lisp
(setq auto-save-default nil)
(setq auto-save-list-file-prefix nil)
(setq make-backup-files nil)
#+end_src

** Revert

Enable global auto-revert mode. This reloads a buffer when the file changes on
disk.

#+begin_src emacs-lisp
(global-auto-revert-mode 1)
(setq global-auto-revert-non-file-buffers t)
#+end_src

** Key bindings

=C-c letter= and =<F5>= through =<F9>= are reserved for user use.
Press =C-c C-h= to show all of these.

- [[info:elisp#Key Binding Conventions][Key Binding Conventions]]
- http://www.gnu.org/software/emacs/manual/html_node/elisp/Key-Binding-Conventions.html

#+begin_src emacs-lisp
(bind-key "C-c b" 'browse-url-at-point)
(bind-key "C-c d" 'my-insert-date)
(bind-key "C-c e" 'eww)
(bind-key "C-c h" 'eldoc)
(bind-key "C-c j" 'dired-jump)
(bind-key "C-c r" 'revert-buffer)

;; Toggles
(bind-keys
 :prefix "C-c t"
 :prefix-map toggle-map
 :prefix-docstring "Keymap for commands that toggle various settings."
 ("a" . my-toggle-auto-hscroll-mode)
 ("b" . scroll-bar-mode)
 ("c" . flycheck-mode)
 ("f" . variable-pitch-mode)
 ("h" . global-hl-line-mode)
 ("l" . visual-line-mode)
 ("m" . menu-bar-mode)
 ("n" . my-toggle-line-numbers)
 ("o" . overwrite-mode)
 ("s" . flyspell-mode)
 ("t" . toggle-truncate-lines)
 ("v" . visual-fill-column-mode)
 ("w" . whitespace-mode))
#+end_src

Emacs defines some keybindings on macOS that are nice to have on Linux. See [[https://github.com/emacs-mirror/emacs/blob/emacs-27.2/lisp/term/ns-win.el#L103][ns-win.el]].

#+begin_src emacs-lisp
(define-key global-map [?\s-+] 'text-scale-adjust)
(define-key global-map [?\s-=] 'text-scale-adjust)
(define-key global-map [?\s--] 'text-scale-adjust)
(define-key global-map [?\s-0] 'text-scale-adjust)
#+end_src

** Space as control key

Use space as control key using [[https://github.com/alols/xcape][dual-function-keys]] on Linux and [[https://pqrs.org/osx/karabiner/][Karabiner]] on macOS.

Karabiner:

- Change Space Key
- Space to Control_L (+ When you type Space only, send Space)

#+begin_src emacs-lisp
(bind-key "C-x M-SPC" 'pop-global-mark)
(bind-key "M-SPC" 'set-mark-command)
(bind-key "M-s-SPC" 'mark-sexp)
(bind-key "M-s- " 'mark-sexp)           ; macOS
(bind-key "s-SPC" 'just-one-space)
#+end_src

** Other settings

Enable repeat-mode.

#+begin_src emacs-lisp
(repeat-mode 1)
#+end_src

Rapid mark-pop (=C-u C-SPC C-SPC...=).

#+begin_src emacs-lisp
(setq set-mark-command-repeat-pop t)
#+end_src

Shorter auto-revert interval. Default is 5 seconds.

#+begin_src emacs-lisp
(setq auto-revert-interval 1)
#+end_src

Misc settings.

#+begin_src emacs-lisp
(setq confirm-kill-processes nil)
(setq enable-local-variables :safe)
(setq ffap-machine-p-known 'reject) ;; Do not ping hosts https://lists.gnu.org/archive/html/emacs-devel/2007-03/msg00466.html
(setq history-length 10000)
(setq kill-do-not-save-duplicates t)
(setq kill-readonly-ok t)
(setq require-final-newline t) ;; Add final newline when saving
(setq save-interprogram-paste-before-kill t) ;; Do not clobber text copied from the clipboard
(setq sentence-end-double-space nil)
(setq-default indent-tabs-mode nil)
(context-menu-mode 1) ;; Right-click context menus
(show-paren-mode 1)
#+end_src

Pulled these from emacs-custom.el.

#+begin_src emacs-lisp
(setq ediff-split-window-function (quote split-window-horizontally))
(setq ediff-window-setup-function (quote ediff-setup-windows-plain))
(setq ffap-machine-p-known 'reject)
;; (setq ns-pop-up-frames nil)
(setq reb-re-syntax 'string)
#+end_src

Wrap lines at N columns instead of 70.

#+begin_src emacs-lisp
(setq-default fill-column 80)
#+end_src

Set timezones for =display-time-world=.

#+begin_src emacs-lisp
(setq zoneinfo-style-world-list
      '(("UTC" "UTC")
        ("America/Los_Angeles" "Seattle")
        ("Europe/Budapest" "Budapest")))
#+end_src

Prefer newer files.

#+begin_src emacs-lisp
(setq load-prefer-newer t)
#+end_src

Add options to kill or revert buffer when prompting to save modified buffers.

#+begin_src emacs-lisp
(add-to-list
 'save-some-buffers-action-alist
 '(?k
   (lambda (buf)
     (kill-buffer buf))
   "kill this buffer"))

(add-to-list
 'save-some-buffers-action-alist
 '(?r
   (lambda (buf)
     (save-current-buffer
       (set-buffer buf)
       (revert-buffer t t t)))
   "revert this buffer"))
#+end_src

Scrolling (e.g. C-l) doesn't exit isearch.

#+begin_src emacs-lisp
(setq isearch-allow-scroll t)
#+end_src

** Compile

#+begin_src emacs-lisp
(setq compilation-scroll-output 'first-error)
(defun my-colorize-compilation-buffer ()
  "Colorize a compilation mode buffer."
  ;; we don't want to mess with child modes such as grep-mode, ack, ag, etc
  (when (eq major-mode 'compilation-mode)
    (let ((inhibit-read-only t))
      (ansi-color-apply-on-region (point-min) (point-max)))))

;; Colorize output of Compilation Mode, see
;; http://stackoverflow.com/a/3072831/355252
(require 'ansi-color)
(add-hook 'compilation-filter-hook #'my-colorize-compilation-buffer)
#+end_src

** Scratch buffer

#+begin_src emacs-lisp
(setq initial-major-mode 'fundamental-mode)
(setq initial-scratch-message "Scratch Buffer\n\n")
#+end_src

** Show region

Continue to show region in inactive windows.

#+begin_src emacs-lisp
(setq highlight-nonselected-windows t)
#+end_src

* User defined functions

#+begin_src emacs-lisp
(defun collapse-blank-lines (start end)
  "Collapse multiple blank lines into one."
  (interactive "r")
  (replace-regexp "^\n\\{2,\\}" "\n" nil start end))
#+end_src

#+begin_src emacs-lisp
(defun my-toggle-auto-hscroll-mode()
  "Toggle `auto-hscroll-mode` between t and current-line."
  (interactive)
  (if (eq auto-hscroll-mode t)
      (setq-local auto-hscroll-mode 'current-line)
    (setq-local auto-hscroll-mode t)))
#+end_src

#+begin_src emacs-lisp
(defun my-toggle-line-numbers()
  (interactive)
  (call-interactively #'display-line-numbers-mode))
#+end_src

#+begin_src emacs-lisp
(defun my-save-buffer-to-clipboard()
  "Save contents of buffer to clipboard."
  (interactive)
  (clipboard-kill-ring-save (point-min) (point-max)))

(define-minor-mode my-edit-clipboard-mode
  "Minor mode for my-edit-edit-keyboard."
  :init-value nil
  :keymap
  `((,(kbd "C-c C-c") . my-save-buffer-to-clipboard)))

(defun my-edit-clipboard()
  "Switch to a buffer that contains the contents of the clipboard."
  (interactive)
  (let ((buf (generate-new-buffer "*clipboard*")))
    (switch-to-buffer buf)
    (clipboard-yank)
    (my-edit-clipboard-mode)))
#+end_src

#+begin_src emacs-lisp
(defun my-shell-cd ()
  "Switch to shell buffer and change directory to `default-directory'."
  (interactive)
  (let ((d default-directory))
    (shell)
    (goto-char (point-max))
    (insert (format "cd %s" d))
    (comint-send-input)))
#+end_src

#+begin_src emacs-lisp
(defun my-vterm-cd ()
  "Switch to vterm buffer and change directory to `default-directory'."
  (interactive)
  (let ((d default-directory))
    (vterm)
    (vterm-send-string (format "cd %s\n" d))))
#+end_src

#+begin_src emacs-lisp
(defun my-insert-date (arg)
  "Insert date string"
  (interactive "p")
  (cond ((= arg 1)
         (insert (format-time-string "%F")))
        ((= arg 4)
         (insert (format-time-string "%F-%H%M%S")))))
#+end_src

* Packages

** ace-link

#+begin_src emacs-lisp
(use-package ace-link
  :init (ace-link-setup-default))
#+end_src

** aggressive-indent

#+begin_src emacs-lisp
(use-package aggressive-indent
  :init
  (global-aggressive-indent-mode 1)
  :config
  (add-to-list 'aggressive-indent-excluded-modes 'cider-repl-mode)
  (add-to-list 'aggressive-indent-excluded-modes 'nix-mode)
  ;; jsonnet-mode's formatting differs from jsonnetfmt command
  (add-to-list 'aggressive-indent-excluded-modes 'jsonnet-mode))
#+end_src

** alert

#+begin_src emacs-lisp
(use-package alert
  :defer t
  :init
  (defun comint-alert-on-prompt (string)
    "Send alert when prompt is detected."
    (when (let ((case-fold-search t))
            (string-match comint-prompt-regexp string))
      (alert (format "Prompt: %s" string)))
    string)

  (defun comint-toggle-alert ()
    "Toggle alert on prompt for current buffer"
    (interactive)
    (make-local-variable 'comint-output-filter-functions)
    (if (member 'comint-alert-on-prompt comint-output-filter-functions)
        (remove-hook 'comint-output-filter-functions 'comint-alert-on-prompt)
      (add-hook 'comint-output-filter-functions #'comint-alert-on-prompt)))
  :config
  (setq alert-default-style
        (if (eq window-system 'ns)
            'notifier
          'notifications)))
#+end_src

** auth-source-pass

#+begin_src emacs-lisp
(use-package auth-source-pass
  :init (auth-source-pass-enable))
#+end_src

** avy

#+begin_src emacs-lisp
(use-package avy
  :bind (("C-c a" . avy-goto-char-timer)
         ("M-g M-g" . avy-goto-line)))
#+end_src

** cider

#+begin_src emacs-lisp
(use-package cider
  :defer t
  :config
  (setq cider-prompt-for-symbol nil)
  (setq cider-repl-history-file "~/.emacs.d/cider-history")
  (setq cider-repl-use-pretty-printing t)
  (setq cider-show-error-buffer nil)
  (add-hook 'cider-repl-mode-hook #'smartparens-strict-mode))
#+end_src

** clojure-mode

#+begin_src emacs-lisp
(use-package clojure-mode
  :defer t
  :config
  (add-hook 'clojure-mode-hook #'smartparens-strict-mode))
#+end_src

** comint-mode

Add more password prompts.

#+begin_src emacs-lisp
(use-package comint
  :defer t
  :config
  (setq comint-input-ignoredups t
        comint-input-ring-size 10000
        comint-password-prompt-regexp
        (concat comint-password-prompt-regexp
                "\\|"
                ;; OpenStack
                "Please enter your OpenStack Password:"
                "\\|"
                ;; curl
                "Enter host password for user '[^']*':"
                "\\|"
                ;; Ansible
                "SUDO password:"
                "\\|"
                "Vault password:"
                "\\|"
                ;; openssl pkcs12 -nocerts -nodesopenssl
                "Enter Import Password:"
                "\\|"
                ;; sshuttle
                "[local sudo] Password:"
                "\\|"
                ;; Java keytool
                "Enter keystore password:"))

  ;; Change scrolling behavior for comint modes.

  (defun comint-mode-config()
    ;; Do not move prompt to bottom of the screen on output
    (setq comint-scroll-show-maximum-output nil)
    ;; Do not center the prompt when scrolling
    ;;
    ;; ("If the value is greater than 100, redisplay will never recenter
    ;; point, but will always scroll just enough text to bring point
    ;; into view, even if you move far away.")
    (setq-local scroll-conservatively 101)
    (setq-local auto-hscroll-mode 'current-line))

  (add-hook 'comint-mode-hook #'comint-mode-config))
#+end_src

** company

#+begin_src emacs-lisp
(use-package company
  :init
  (global-company-mode 1)
  :config
  (global-set-key (kbd "TAB") #'company-indent-or-complete-common)
  (setq company-show-numbers t
        company-minimum-prefix-length 2))
#+end_src

** company-jedi

#+begin_src emacs-lisp
(use-package company-jedi
  :defer t
  ;; :init (add-hook 'python-mode-hook 'jedi:setup)
  :config
  (setq jedi:use-shortcuts t))
#+end_src

** cue-mode

#+begin_src emacs-lisp
(defconst cue-keywords
  '("package" "import" "for" "in" "if" "let"))

(defconst cue-constants '("null" "true" "false"))

(defconst cue-types
  '("int" "float" "string" "bool" "bytes"))

(defvar cue--font-lock-keywords
  `(("//.*" . font-lock-comment-face)
    (,(regexp-opt cue-constants 'symbols) . font-lock-constant-face)
    (,(regexp-opt cue-keywords 'symbols) . font-lock-keyword-face)
    (,(regexp-opt cue-types 'symbols) . font-lock-type-face)))

;;;###autoload
(define-derived-mode cue-mode prog-mode "CUE"
  "Major mode for the CUE language."

  ;; Comments
  (setq-local comment-start "// ")
  (setq-local comment-end "")
  (setq-local comment-start-skip "//[[:space:]]*")

  (setq indent-tabs-mode t)

  (setq-local font-lock-defaults '(cue--font-lock-keywords)))

;;;###autoload
(add-to-list 'auto-mode-alist '("\\.cue\\'" . cue-mode))
#+end_src

** dired

#+begin_src emacs-lisp
(use-package dired
  :defer t
  :config
  (setq dired-dwim-target t)
  (defun my-dired-mode-hook ()
    (setq truncate-lines t))
  (add-hook 'dired-mode-hook #'my-dired-mode-hook))
#+end_src

** dns-mode

#+begin_src emacs-lisp
(use-package dns-mode
  :defer t
  :config
  ;; Do not auto increment serial (C-c C-s to increment)
  (setq dns-mode-soa-auto-increment-serial nil))
#+end_src

** eglot

#+begin_src emacs-lisp
(use-package eglot
  :config
  ;; Use rust-analyzer instead of rls
  (add-to-list 'eglot-server-programs '(rust-mode "rust-analyzer"))
  (add-to-list 'eglot-server-programs '(terraform-mode "terraform-lsp"))

  (defun eglot-organize-imports-on-save ()
    ;; https://github.com/joaotavora/eglot/issues/574#issuecomment-769645691
    ;; Ignore (error "[eglot] No \"source.organizeImports\" code actions here")
    (ignore-errors (call-interactively #'eglot-code-action-organize-imports)))

  (defun my-eglot-hook()
    (when (eglot-managed-p)
      (add-hook 'before-save-hook #'eglot-format-buffer nil t)
      (add-hook 'before-save-hook #'eglot-organize-imports-on-save nil t)))

  (add-hook 'eglot-managed-mode-hook #'my-eglot-hook)
  :hook
  (go-mode . eglot-ensure)
  (rust-mode . eglot-ensure)
  (python-mode . eglot-ensure)
  (terraform-mode . eglot-ensure))
#+end_src

** epresent

#+begin_src emacs-lisp
(use-package epresent
  :defer t
  :config
  (setq epresent-face-attributes '((default :height 300)))
  (defun my-epresent-hook ()
    (setq-local global-hl-line-mode nil))
  (add-hook 'epresent-start-presentation-hook #'my-epresent-hook))
#+end_src

** erc

#+begin_src emacs-lisp
(use-package erc
  :defer t
  :config
  (erc-services-mode 1)
  (erc-spelling-mode 1)

  (setq erc-hide-list '("JOIN" "MODE" "PART" "QUIT"))

  ;; Nickserv configuration
  (setq erc-nick "svend")
  (setq erc-prompt-for-nickserv-password nil)
  (let ((bitlbee-username (password-store-get "bitlbee-username"))
        (bitlbee-password (password-store-get "bitlbee-password"))
        (freenode-username (password-store-get "freenode/username"))
        (freenode-password (password-store-get "freenode/password")))
    (setq erc-nickserv-passwords
          `((BitlBee ((,bitlbee-username . ,bitlbee-password)))
            ((freenode ((,freenode-username . ,freenode-password)))))))

  (setq erc-autojoin-channels-alist '(("freenode.net" "#nixos" "##nix-darwin" "#org-mode" "#emacs"))))
#+end_src

** erc-track

#+begin_src emacs-lisp
(use-package erc-track
  :defer t
  :config
  ;; Do not notify for join, part, or quit
  (add-to-list 'erc-track-exclude-types "JOIN")
  (add-to-list 'erc-track-exclude-types "PART")
  (add-to-list 'erc-track-exclude-types "QUIT"))
#+end_src

** expand-region

#+begin_src emacs-lisp
(use-package expand-region
  :bind (("M-S-SPC" . er/expand-region)))
#+end_src

** flycheck

#+begin_src emacs-lisp
(use-package flycheck
  :defer t
  :init
  (use-package flycheck-ledger
    :defer t)
  (use-package flycheck-rust
    :defer t
    :config
    (add-hook 'flycheck-mode-hook #'flycheck-rust-setup))
  (use-package flycheck-golangci-lint
    :defer t
    :config
    (add-hook 'flycheck-mode-hook #'flycheck-golangci-lint-setup))
  :config
  ;; (add-hook 'flycheck-mode-hook #'flycheck-cask-setup)
  (setq flycheck-python-flake8-executable "python3"
        flycheck-python-pylint-executable "python3")
  (flycheck-add-mode #'yaml-ruby #'ansible-playbook-mode)
  (flycheck-add-next-checker 'chef-foodcritic 'ruby-rubocop)
  (add-hook 'after-init-hook #'global-flycheck-mode))
#+end_src

** git

#+begin_src emacs-lisp
(use-package git
  :defer t
  :config
  (defun my-git-clone (url)
    (interactive "sGit repository URL: ")
    (let ((git-repo "~/src"))
      (git-clone url))))
#+end_src

** git-link

#+begin_src emacs-lisp
(use-package git-link
  :defer t
  :config
  (setq git-link-open-in-browser t))
#+end_src

** gnuplot-mode

#+begin_src emacs-lisp
(use-package gnuplot-mode
  :mode
  (("\\.gnuplot\\'" . gnuplot-mode)
   ("\\.gp\\'" . gnuplot-mode)))
#+end_src

** gnus

Sanitized version of .authinfo.gpg for Gmail IMAP and SMTP.

#+begin_src sh :results output
gpg --batch -d ~/.authinfo.gpg | awk '/\.gmail\.com/{$4="EMAIL";$6="PASSWORD";print}'
#+end_src

#+RESULTS:
: machine imap.gmail.com login EMAIL password PASSWORD port imaps
: machine smtp.gmail.com login EMAIL password PASSWORD port 587

#+begin_src sh :results output
pass show imap.gmail.com | sed -e '1s/.*/PASSWORD/' -e '/user:/s/[^ ]*$/EMAIL/'
#+end_src

#+RESULTS:
: PASSWORD
: user: EMAIL
: port: imaps

#+begin_src sh :results output
pass show smtp.gmail.com | sed -e '1s/.*/PASSWORD/' -e '/user:/s/[^ ]*$/EMAIL/'
#+end_src

#+RESULTS:
: PASSWORD
: user: EMAIL
: port: smtp

#+begin_src emacs-lisp
(use-package gnus
  :defer t
  :config
  ;; Use secondary-select-methods
  (setq gnus-select-method '(nnnil ""))

  ;; Gmane (mailing lists)
  (add-to-list 'gnus-secondary-select-methods
               '(nntp "news.gmane.io"))
  ;; Gwene (RSS feeds)
  (add-to-list 'gnus-secondary-select-methods
               '(nntp "news.gwene.org"))

  ;; Fastmail
  ;; (add-to-list 'gnus-secondary-select-methods
  ;;              '(nnimap "imap.fastmail.com"))

  ;; Uncomment to record all IMAP commands in the ‘"*imap log*"’
  ;; (setq nnimap-record-commands t)

  ;; Skip prompt: "Gnus auto-save file exists. Do you want to read it?"
  (setq gnus-always-read-dribble-file t
        ;; Mark sent messages as read
        gnus-gcc-mark-as-read t
        gnus-inhibit-startup-message t)
  :init
  ;; gnus-home-directory must be set before gnus loads
  (setq gnus-home-directory (concat user-emacs-directory "gnus/"))
  (setq message-directory (concat user-emacs-directory "Mail/"))
  ;; TODO: nnfolder-directory is still set to ~/Mail/archive
  (setq nnfolder-directory (concat message-directory "archive")))
#+end_src

** gnus-alias

#+begin_src emacs-lisp
(use-package gnus-alias
  :defer t
  :config
  (setq gnus-alias-identity-alist
        '(("fastmail" nil "Svend Sorensen <svend@svends.net>" nil (("Bcc" . "svend@svends.net")) nil)))
  (setq gnus-alias-default-identity "fastmail")
  (setq gnus-alias-identity-rules '()))
#+end_src

** go-mode

#+begin_src emacs-lisp
(use-package go-mode
  :defer t
  :mode
  ;; modes do not exist for go module files
  (("go.mod\\'" . fundamental-mode)
   ("go.sum\\'" . fundamental-mode))
  :config
  (setq gofmt-command "gofumports")

  (defun my-go-mode-defaults ()
    ;; CamelCase aware editing operations
    (subword-mode 1)
    ;; Use eglot-format-buffer hook
    ;; (add-hook 'before-save-hook #'gofmt-before-save nil t)
    )
  (add-hook 'go-mode-hook #'my-go-mode-defaults))
#+end_src

** groovy-mode

#+begin_src emacs-lisp
(use-package groovy-mode
  :config
  (defun my-groovy-mode-hook ()
    ;; Indent groovy code four spaces instead of two
    (setq c-basic-offset 4))
  (add-hook 'groovy-mode-hook #'my-groovy-mode-hook)
  :mode
  (("Jenkinsfile\\'" . groovy-mode)))
#+end_src

** haskell-mode

#+begin_src emacs-lisp
(use-package haskell-mode
  :defer t
  :config
  (defun my-haskell-mode-defaults ()
    (subword-mode 1)
    (turn-on-haskell-doc-mode)
    (turn-on-haskell-indentation)
    (interactive-haskell-mode 1))
  (add-hook 'haskell-mode-hook #'my-haskell-mode-defaults))
#+end_src

** hippie-exp

- [[info:autotype#Hippie%20Expand][info:autotype#Hippie Expand]]
- http://www.gnu.org/software/emacs/manual/html_node/autotype/Hippie-Expand.html

#+begin_src emacs-lisp
(use-package hippie-exp
  :bind (("M-/" . hippie-expand)))
#+end_src

** ibuffer

#+begin_src emacs-lisp
(use-package ibuffer
  :bind (("C-x C-b" . ibuffer)))
#+end_src

** json-mode

Terraform state files are JSON.

#+begin_src emacs-lisp
(use-package json-mode
  :defer t
  :mode ("\\.tfstate\\'" "\\.tfstate\\.backup\\'")
  :config
  ;; Two-space indentation for JSON (default is 4)
  (setq b 2)
  (add-hook 'json-mode-hook
            (lambda ()
              (setq-local js-indent-level 2))))
#+end_src

** lisp-mode

#+begin_src emacs-lisp
(use-package lisp-mode
  :config
  (add-hook 'emacs-lisp-mode-hook
            (lambda ()
              (smartparens-strict-mode))))
#+end_src

** magit

#+begin_src emacs-lisp
(use-package magit
  :bind (("C-c m" . magit-dispatch-popup))
  :init
  ;; We have global-auto-revert mode enabled
  (setq magit-auto-revert-mode nil)
  :config
  (setq magit-display-buffer-function #'magit-display-buffer-same-window-except-diff-v1
        magit-repository-directories '("~/src")
        magit-save-repository-buffers 'dontask)

  (add-hook 'after-save-hook #'magit-after-save-refresh-status))
#+end_src

** markdown-mode

#+begin_src emacs-lisp
(use-package markdown-mode
  :defer t
  :mode (("README\\.md\\'" . gfm-mode)
         ("CHANGELOG\\.md\\'" . markdown-mode)))
#+end_src

** message

#+begin_src emacs-lisp
(use-package message
  :defer t
  :config
  ;; Internal SMTP library
  (setq message-send-mail-function 'smtpmail-send-it
        smtpmail-smtp-server "smtp.fastmail.com"
        smtpmail-smtp-service 587)

  ;; OR

  ;; Use MSMTP with auto-smtp selection
  ;; http://www.emacswiki.org/emacs/GnusMSMTP#toc3
  ;;
  (setq sendmail-program "/usr/bin/msmtp"
        mail-specify-envelope-from t
        mail-envelope-from 'header
        message-sendmail-envelope-from 'header)

  ;; Enable notmuch-address completion
  ;; (notmuch-address-message-insinuate)

  ;; Enable gnus-alias
  (add-hook 'message-setup-hook #'gnus-alias-determine-identity)
  (define-key message-mode-map (kbd "C-c C-p") 'gnus-alias-select-identity))
#+end_src

** minions

Hides all minor-modes in the status bar behind a symbol.

#+begin_src emacs-lisp
(use-package minions
  :config (setq minions-mode-line-lighter "…")
  :init (minions-mode 1))
#+end_src

** modus-themes

TODO: Setting variables in =:config= section does not apply them.

#+begin_src emacs-lisp
(use-package modus-themes
  :config
  (require 'color)
  (defun my-modus-themes-saturate (percent)
    "Saturate current Modus theme palette overrides by PERCENT."
    (interactive
     (list (read-number "Saturation by percent: ")))
    (let* ((theme (modus-themes--current-theme))
           (palette (pcase theme
                      ('modus-operandi modus-themes-operandi-colors)
                      ('modus-vivendi modus-themes-vivendi-colors)
                      (_ (error "No Modus theme is active"))))
           (overrides (pcase theme
                        ('modus-operandi 'modus-themes-operandi-color-overrides)
                        ('modus-vivendi 'modus-themes-vivendi-color-overrides)
                        (_ (error "No Modus theme is active")))))
      (let (name cons colors)
        (dolist (cons palette)
          (setq name (color-saturate-name (cdr cons) percent))
          (setq name (format "%s" name))
          (setq cons `(,(car cons) . ,name))
          (push cons colors))
        (set overrides colors))
      (pcase theme
        ('modus-operandi (modus-themes-load-operandi))
        ('modus-vivendi (modus-themes-load-vivendi)))))
  :init
  (setq modus-themes-italic-constructs t
        modus-themes-org-blocks 'gray-background; gray background for org code blocks
        modus-themes-region '(bg-only)
        modus-themes-scale-headings t
        modus-themes-subtle-line-numbers t ; no dark background for current line number
        modus-themes-variable-pitch-ui t
        modus-themes-variable-pitch-headings t
        ;; Off-white background
        modus-themes-operandi-color-overrides '((bg-main . "#fcfbfb")))
  ;; Load the theme files before enabling a theme (else you get an error).
  (modus-themes-load-themes)
  (modus-themes-load-operandi))
#+end_src

** native-complete

#+begin_src emacs-lisp
(use-package native-complete
  :config
  ;; Add = to enable completion for --option= flags
  ;; (setq native-complete-exclude-regex "[^$(-/_~=[:alnum:]]")

  ;; TODO: not working
  ;; (with-eval-after-load 'shell
  ;;   (when (string-match-p "bash" shell-file-name)
  ;;     (native-complete-setup-bash)))

  (defun my-shell-hook ()
    (setq completion-at-point-functions '(native-complete-at-point)))

  ;; (add-hook 'shell-mode-hook #'my-shell-hook)
  )
#+end_src

Notes for testing native-complete.

Good tips here:
https://github.com/CeleritasCelery/emacs-native-shell-complete/issues/3#issuecomment-572810792

Start Emacs

#+begin_example
open -a ~/.nix-profile/Applications/Emacs.app --new --args -q
# or
open -a ~/.nix-profile/Applications/Emacs.app --new --args -q --load ~/src/emacs-native-shell-complete/native-complete.el
#+end_example

#+begin_src emacs-lisp :tangle no
(package-initialize)
(setq shell-file-name "bash") ;; Its value is "/bin/bash"; Original value was "/bin/sh"
;; Enable completion for --opt=val flags
(setq native-complete-exclude-regex "[^$(-/_~=[:alnum:]]")

(with-eval-after-load 'shell
  (native-complete-setup-bash))

(defun my-shell-hook ()
  (setq completion-at-point-functions '(native-complete-at-point)))

(add-hook 'shell-mode-hook #'my-shell-hook)
#+end_src

** nix-mode

#+begin_src emacs-lisp
(use-package nix-mode
  :defer t
  :config
  (setq nix-nixfmt-bin "nixpkgs-fmt"))
#+end_src

** notmuch

#+begin_src emacs-lisp
(use-package notmuch
  :defer t
  :config
  ;; Use Bcc instead of Fcc
  (setq notmuch-fcc-dirs nil)

  ;; Show newest mail first
  (setq-default notmuch-search-oldest-first nil)

  ;; ;; Notmuch remote setup (on all hosts except garnet)
  ;; (when (not (string= system-name "garnet.ciffer.net"))
  ;;   (setq notmuch-command "notmuch-remote"))

  ;; Getting Things Done (GTD) keybindings

  (setq notmuch-tag-macro-alist
        (list
         '("a" "+action" "-waiting" "-inbox")
         '("w" "-action" "+waiting" "-inbox")
         '("d" "-action" "-waiting" "-inbox")))

  (defun notmuch-search-apply-tag-macro (key)
    (interactive "k")
    (let ((macro (assoc key notmuch-tag-macro-alist)))
      (notmuch-search-tag (cdr macro))))

  (defun notmuch-show-apply-tag-macro (key)
    (interactive "k")
    (let ((macro (assoc key notmuch-tag-macro-alist)))
      (notmuch-show-tag (cdr macro))))

  (define-key notmuch-search-mode-map "`" 'notmuch-search-apply-tag-macro)
  (define-key notmuch-show-mode-map "`" 'notmuch-show-apply-tag-macro))
#+end_src

** nov

nov.el (clever name) is an EPUB reader package.

#+begin_src emacs-lisp
(use-package nov
  :mode ("\\.epub\\'" . nov-mode)
  :config
  (setq nov-save-place-file (expand-file-name "nov-save-place" user-emacs-directory)))
#+end_src

** ob-go

#+begin_src go
package main

import "fmt"

func main() {
        fmt.Println("Hello, world")
}
#+end_src

#+RESULTS:
: Hello, world

#+begin_src emacs-lisp
(use-package ob-go)
#+end_src

** ob-rust

Requires [[https://github.com/fornwall/rust-script][rust-script]].

#+begin_src rust
for count in 0..2 {
    println!("{}. Hello World!", count);
}
#+end_src

#+RESULTS:
: 0. Hello World!
: 1. Hello World!

#+begin_src emacs-lisp
(use-package ob-rust)
#+end_src

** orderless

#+begin_src emacs-lisp
(use-package orderless
  :demand t
  :config (setq completion-styles '(orderless)))
#+end_src

** org

#+begin_src emacs-lisp
(use-package org
  :defer t
  :bind (("C-c c" . org-capture)
         ("C-c o a" . org-agenda)
         ("C-c o b" . org-iswitchb)
         ("C-c o l" . org-store-link))
  :config
  (add-hook 'org-mode-hook #'auto-fill-mode)

  (setq org-babel-python-command "python3"
        org-capture-templates  '(("t" "Task" entry (file "tasks.org")
                                  "* TODO %?\n   SCHEDULED: %T\n\n%a" :prepend t))
        org-default-notes-file "~/doc/org/notes.org"
        org-directory "~/doc/org"
        org-ellipsis "…"
        org-plantuml-jar-path (expand-file-name "~/.nix-profile/lib/plantuml.jar")
        org-refile-targets '((nil :maxlevel . 9))
        org-reverse-note-order t
        org-src-ask-before-returning-to-edit-buffer nil
        org-src-preserve-indentation t
        org-src-window-setup 'current-window
        org-startup-with-inline-images t
        org-use-speed-commands t)

  (org-babel-do-load-languages
   'org-babel-load-languages
   '((calc . t)
     (emacs-lisp . t)
     (perl . t)
     (plantuml . t)
     (python . t)
     (ruby . t)
     (shell . t))))
#+end_src

*** TODO: org-babel calc fix

Evaluating org-babel calc blocks can produce an error. Here's a reproduce case:

Works:

#+begin_src calc :exports both
1 (sample) * 0.2 (dollar/sample)
#+end_src

#+RESULTS:
: 0.2 dollar

Fails:

#+begin_src calc :exports both
10 (sample) * 0.2 (dollar/sample)
#+end_src

#+begin_example
math-normalize-fancy: Wrong type argument: number-or-marker-p, (float 2 0)
#+end_example

The following patched =org-babel-execute:calc= fixes the error:

#+begin_src emacs-lisp :tangle no
(defun org-babel-execute:calc (body params)
  "Execute a block of calc code with Babel."
  (unless (get-buffer "*Calculator*")
    (save-window-excursion (calc) (calc-quit)))
  (let* ((vars (org-babel--get-vars params))
	 (org--var-syms (mapcar #'car vars))
	 (var-names (mapcar #'symbol-name org--var-syms)))
    (mapc
     (lambda (pair)
       (calc-push-list (list (cdr pair)))
       (calc-store-into (car pair)))
     vars)
    (mapc
     (lambda (line)
       (when (> (length line) 0)
	 (cond
	  ;; simple variable name
	  ((member line var-names) (calc-recall (intern line)))
	  ;; stack operation
	  ((string= "'" (substring line 0 1))
	   (funcall (lookup-key calc-mode-map (substring line 1)) nil))
	  ;; complex expression
	  (t
	   (calc-push-list
	    (list (let ((res (calc-eval line)))
                    (cond
                     ((numberp res) res)
                     ;; Svend: Patch to fix `Wrong type argument: number-or-marker-p` errora
                     ;; ((math-read-number res) (math-read-number res))
                     ((listp res) (error "Calc error \"%s\" on input \"%s\""
                                         (cadr res) line))
                     (t (replace-regexp-in-string
                         "'" ""
                         (calc-eval
                          (math-evaluate-expr
                           ;; resolve user variables, calc built in
                           ;; variables are handled automatically
                           ;; upstream by calc
                           (mapcar #'org-babel-calc-maybe-resolve-var
                                   ;; parse line into calc objects
                                   (car (math-read-exprs line)))))))))
                  ))))))
     (mapcar #'org-trim
	     (split-string (org-babel-expand-body:calc body params) "[\n\r]"))))
  (save-excursion
    (with-current-buffer (get-buffer "*Calculator*")
      (prog1
        (calc-eval (calc-top 1))
        (calc-pop 1)))))
#+end_src

** org-capture

#+begin_src emacs-lisp
(use-package org-capture
  :bind (("C-c o c" . org-capture))
  :config
  (setq org-capture-templates
        '(("t" "Task" entry (file "tasks.org")
           "* TODO %?\n   SCHEDULED: %T\n\n%a" :prepend t))))
#+end_src

** pdf-tools

#+begin_src emacs-lisp
(use-package pdf-tools
  :magic ("%PDF" . pdf-view-mode)
  :config
  (pdf-tools-install))
#+end_src

** plantuml-mode

#+begin_src emacs-lisp
(use-package plantuml-mode
  :defer t
  :config
  (setq plantuml-jar-path "/usr/local/opt/plantuml/libexec/plantuml.jar"))
#+end_src

** project

#+begin_src emacs-lisp
(use-package project
  :config
  (add-hook 'project-find-functions #'my-project-try-go)
  (add-hook 'project-find-functions #'my-project-try-projectile)

  (defun my-project-try-projectile (dir)
    (let ((override (locate-dominating-file dir ".projectile")))
      (if override
          (cons 'vc override)
        nil)))

  (defun my-project-try-go (dir)
    (let ((override (locate-dominating-file dir "go.mod")))
      (if override
          (cons 'vc override)
        nil))))
#+end_src

** python

#+begin_src emacs-lisp
(use-package python
  :defer t
  :config
  (setq python-shell-interpreter "pipenv-try"
        python-shell-interpreter-args "python3 -i")

  (defun my-python-mode-defaults ()
    ;; PEP 8 compliant filling rules, 79 chars maximum
    (setq fill-column 79)
    ;; (add-hook 'before-save-hook #'py-isort-before-save)
    )

  (add-hook 'python-mode-hook #'my-python-mode-defaults)

  (defun my-inferior-python-mode-setup ()
    (setq comint-input-ring-file-name "~/.python_history")
    (when (ring-empty-p comint-input-ring)
      (comint-read-input-ring t)))
  (add-hook 'inferior-python-mode-hook #'my-inferior-python-mode-setup))
#+end_src

** recentf

#+begin_src emacs-lisp
(use-package recentf
  :init (recentf-mode 1)
  :config
  ;; Increase size of recent file list from 20
  (setq recentf-max-saved-items 1000))
#+end_src

** ruby-mode

Ruby auto-modes. These are from [[https://github.com/bbatsov/prelude/blob/0a1e8e4057a55ac2d17cc0cd073cc93eb7214ce8/modules/prelude-ruby.el#L39][prelude]].

#+begin_src emacs-lisp
(use-package ruby-mode
  :mode
  (("\\.rake\\'" . ruby-mode)
   ("Rakefile\\'" . ruby-mode)
   ("\\.gemspec\\'" . ruby-mode)
   ("\\.ru\\'" . ruby-mode)
   ("Gemfile\\'" . ruby-mode)
   ("Guardfile\\'" . ruby-mode)
   ("Capfile\\'" . ruby-mode)
   ("\\.thor\\'" . ruby-mode)
   ("\\.rabl\\'" . ruby-mode)
   ("Thorfile\\'" . ruby-mode)
   ("Vagrantfile\\'" . ruby-mode)
   ("\\.jbuilder\\'" . ruby-mode)
   ("Podfile\\'" . ruby-mode)
   ("\\.podspec\\'" . ruby-mode)
   ("Puppetfile\\'" . ruby-mode)
   ("Berksfile\\'" . ruby-mode)
   ("Appraisals\\'" . ruby-mode))
  :config
  (defun my-ruby-mode-defaults ()
    (inf-ruby-minor-mode 1)
    (ruby-tools-mode 1)
    ;; CamelCase aware editing operations
    (subword-mode 1))
  (add-hook 'ruby-mode-hook #'my-ruby-mode-defaults))
#+end_src

** rust-mode

#+begin_src emacs-lisp
(use-package rust-mode
  :defer t
  :config
  ;; Use eglot-format-buffer hook
  ;; (setq rust-format-on-save t)
  )
#+end_src

** savehist

#+begin_src emacs-lisp
(use-package savehist
  :init (savehist-mode 1))
#+end_src

** saveplace

Remember where cursor was in files, even if Emacs is restarted.

#+begin_src emacs-lisp
(use-package saveplace
  :init (save-place-mode 1))
#+end_src

** server

Start Emacs server unless one is already running. =server-running-p= requires
=server=.

#+begin_src emacs-lisp
(use-package server
  :config
  (unless (server-running-p)
    (server-start)))
#+end_src

** shell

#+begin_src emacs-lisp
(defun shell-mode-config ()
  ;; company-mode
  ;;
  ;; Disable idle completion
  (setq-local company-idle-delay nil)
  ;; Tab to complete. Use company-complete-common instead of
  ;; company-manual-begin to complete on tab.
  (define-key shell-mode-map (kbd "TAB") #'company-complete-common)

  ;; Do not store duplicate history entries
  (setq comint-input-ignoredups t))
#+end_src

#+begin_src emacs-lisp
(use-package shell
  :defer t
  :config
  ;; Bind Alt-. to insert previous argument
  (define-key shell-mode-map "\M-." 'comint-insert-previous-argument)

  (add-to-list 'display-buffer-alist
               '("^\\*shell\\*" . ((display-buffer-reuse-window display-buffer-same-window))))

  ;; bash-completion only loaded for login shells; note that "--login" must come
  ;; before short options like "-i"
  (add-to-list 'explicit-bash-args "--login")

  ;; (setq explicit-shell-file-name "bash")
  (setq shell-file-name "zsh")
  (setq explicit-shell-file-name "zsh")

  ;; Do not try to colorize comments and strings in shell mode
  (setq shell-font-lock-keywords nil)
  ;; This seems to be slowing down shell buffers
  ;; (remove-hook 'shell-mode-hook 'goto-address-mode)
  (add-hook 'shell-mode-hook #'shell-mode-config))
#+end_src

To disable scroll to bottom:

#+begin_src emacs-lisp :tangle no
(remove-hook 'comint-output-filter-functions
             'comint-postoutput-scroll-to-bottom)
#+end_src

Changing directory generates a message with the new directory path. To
disable this:

#+begin_src emacs-lisp :tangle no
(setq shell-dirtrack-verbose nil)
#+end_src

To search history when you are at a command line using C-r (instead of
M-r):

#+begin_src emacs-lisp :tangle no
(setq comint-history-isearch dwim)
#+end_src

** sh-script

#+begin_src emacs-lisp
(use-package sh-script
  :defer t
  :config
  (defun my-setup-sh-mode ()
    "My preferences for sh-mode"
    (setq sh-basic-offset 2)
    (setq sh-indent-after-continuation 'always)
    (setq sh-indent-for-case-alt '+)
    (setq sh-indent-for-case-label 0))

  (add-hook 'sh-mode-hook #'my-setup-sh-mode))
#+end_src

** slime

[[http://www.common-lisp.net/project/slime/doc/html/Installation.html#Installation][Slime Installation]]

#+begin_src emacs-lisp
(use-package slime
  :defer t
  :config
  (setq inferior-lisp-program "sbcl"))
#+end_src

** smartparens

#+begin_src emacs-lisp
(use-package smartparens
  :init
  (smartparens-global-mode 1)
  (require 'smartparens-config)
  (sp-use-paredit-bindings)
  ;; sp-paredit-bindings: ("M-r" . sp-splice-sexp-killing-around)
  (define-key sp-keymap (kbd "M-r") nil)
  (define-key sp-keymap (kbd "M-s") nil)
  ;; sp-smartparens-bindings: ("M-<backspace>" . sp-backward-unwrap-sexp)
  (define-key sp-keymap (kbd "M-<backspace>") nil))
#+end_src

** super-save

super-save must be enabled after super-save-triggers is updated, so :init will
not work.

https://github.com/bbatsov/super-save#use-package

#+begin_src emacs-lisp
(use-package super-save
  :config
  (add-to-list 'super-save-triggers #'ace-window)
  (setq super-save-auto-save-when-idle t)
  (setq super-save-idle-duration 1) ; default is 5
  ;; Disable super-save for haxl-mode, which asks for confirmation when saving
  (add-hook 'hexl-mode-hook (lambda () (super-save-mode -1))))
  :init
  (super-save-mode 1)
#+end_src

** swiper

#+begin_src emacs-lisp
(use-package swiper
  :bind (("C-c s" . swiper)))
#+end_src

** swiper

#+begin_src emacs-lisp
(use-package swiper
  :bind (("C-c s" . swiper)))
#+end_src

** term

#+begin_src emacs-lisp
(defun my-setup-term-mode ()
  "My preferences for term mode"
  ;; Settings recommended in term.el
  ;;
  ;; http://git.savannah.gnu.org/cgit/emacs.git/tree/lisp/term.el?id=c720ef1329232c76d14a0c39daa00e37279aa818#n179
  (setq-local mouse-yank-at-point t)
  ;; End of recommended settings

  ;; Make term mode more term-like

  (define-key term-raw-map (kbd "<C-backspace>") 'term-send-raw)
  (define-key term-raw-map (kbd "<C-S-backspace>") 'term-send-raw)

  ;; Toogle between line and char mode in term-mode
  (define-key term-raw-map (kbd "C-'") 'term-line-mode)
  (define-key term-mode-map (kbd "C-'") 'term-char-mode)

  ;; Enable Emacs key bindings in term mode
  (define-key term-raw-map (kbd "M-!") nil)
  (define-key term-raw-map (kbd "M-&") nil)
  (define-key term-raw-map (kbd "M-:") nil)
  (define-key term-raw-map (kbd "M-x") nil)

  ;; Paste key bindings for Mac keyboards with no insert
  (define-key term-raw-map (kbd "C-c y") 'term-paste)
  (define-key term-raw-map (kbd "s-v") 'term-paste)

  ;; Enable address links in term mode
  (goto-address-mode 1))

(use-package term
  :defer t
  :config
  (setq-default term-buffer-maximum-size 10000)
  (add-hook 'term-mode-hook #'my-setup-term-mode))
#+end_src

** terraform-mode

#+begin_src emacs-lisp
(use-package terraform-mode
  :defer t
  :config (add-hook 'terraform-mode-hook #'terraform-format-on-save-mode))
#+end_src

** toml-mode

#+begin_src emacs-lisp
(use-package toml-mode
  :defer t
  :mode
  (("Cargo\\.lock\\'" . toml-mode)))
#+end_src

** tramp

Edit remote files via sudo

See http://www.gnu.org/software/emacs/manual/html_node/tramp/Ad_002dhoc-multi_002dhops.html

=/ssh:example.com|sudo::/file=

Use SSH default control master settings. Add the following to
=~/.ssh/config=.

#+begin_example conf
ControlMaster auto
ControlPath ~/.ssh/control.%h_%p_%r
ControlPersist 60m
#+end_example

#+begin_src emacs-lisp
(use-package tramp
  :defer t
  :config
  ;; Frequently Asked Questions: How could I speed up tramp?
  ;; https://www.gnu.org/software/emacs/manual/html_node/tramp/Frequently-Asked-Questions.html
  (setq vc-ignore-dir-regexp
        (format "\\(%s\\)\\|\\(%s\\)"
                vc-ignore-dir-regexp
                tramp-file-name-regexp))

  (setq tramp-use-ssh-controlmaster-options nil
        ;; Tramp sets HISTFILE so bash history on remote shells does not work.
        tramp-histfile-override nil))
#+end_src

** visual-fill-column

#+begin_src emacs-lisp
(use-package visual-fill-column
  :init
  (dolist (hook '(visual-line-mode-hook
                  cider-repl-mode-hook
                  compilation-mode-hook
                  comint-mode-hook
                  conf-mode-hook
                  custom-mode-hook
                  dired-mode-hook
                  erc-mode-hook
                  eww-mode
                  gnus-article-mode-hook
                  gnus-group-mode-hook
                  gnus-summary-mode-hook
                  hexl-mode-hook
                  Info-mode-hook
                  magit-mode-hook
                  package-menu-mode-hook
                  prog-mode-hook
                  ;; special-mode-hook ;; FIXME: Text is chopped off in pdf-view mode
                  text-mode-hook
                  vterm-mode-hook))
    (add-hook hook #'visual-fill-column-mode))
  :config
  (setq-default visual-fill-column-center-text t
                visual-fill-column-fringes-outside-margins nil
                visual-fill-column-width 110)
  (setq split-window-preferred-function #'visual-fill-column-split-window-sensibly))
#+end_src

** vterm

#+begin_src emacs-lisp
(use-package vterm
  :defer t
  :config
  (setq vterm-shell "zsh"
        vterm-kill-buffer-on-exit nil
        vterm-max-scrollback 100000))
#+end_src

** winner

The winner-mode package provides a way to restore previous window
layouts.

#+begin_src emacs-lisp
(use-package winner
  :config
  (define-key winner-mode-map (kbd "C-c w") 'winner-undo)
  (define-key winner-mode-map (kbd "C-c W") 'winner-redo) 
  ;; Set up repeat for C-w w w...
  (defvar winner-repeat-map
     (let ((map (make-sparse-keymap)))
       (define-key map "w" 'winner-undo)
       (define-key map "W" 'winner-redo)
       map)
     "Keymap to repeat winner key sequences. Used in `repeat-mode'.")
   (put 'winner-undo 'repeat-map 'winner-repeat-map)
  :init
  (setq winner-dont-bind-my-keys t) ; don't bind C-<left|right>
  (winner-mode 1))
#+end_src

** yaml-mode

#+begin_src emacs-lisp
(use-package yaml-mode
  :defer t
  :mode (("_helpers\\.tpl\\'" . yaml-mode))           ; Kubernetes Helm
  :config
  (defconst yaml-outline-regex
    (concat "\\( *\\)\\(?:\\(?:--- \\)?\\|{\\|\\(?:[-,] +\\)+\\) *"
            "\\(?:" yaml-tag-re " +\\)?"
            "\\(" yaml-bare-scalar-re "\\) *:"
            "\\(?: +\\|$\\)")
    "Regexp matching a single YAML hash key. This is adds a
    capture group to `yaml-hash-key-re' for the
    indentation.")

  (defun yaml-outline-level ()
    "Return the depth to which a statement is nested in the outline."
    (- (match-end 1) (match-beginning 1)))

  (defun my-yaml-mode-hook()
    (outline-minor-mode 1)
    (define-key yaml-mode-map (kbd "<backtab>") 'outline-toggle-children)
    (setq-local outline-regexp yaml-outline-regex)
    (setq-local outline-level #'yaml-outline-level))

  (add-hook 'yaml-mode-hook #'my-yaml-mode-hook))
#+end_src

** yasnippet

#+begin_src emacs-lisp
(use-package yasnippet
  :init (yas-global-mode 1))
#+end_src

* External config

Load external configuration.

#+begin_src emacs-lisp
(when (file-exists-p "~/.emacs.d/local.el")
  (load-file "~/.emacs.d/local.el"))
#+end_src
